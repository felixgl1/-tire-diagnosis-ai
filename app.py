# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DHHavo4omccWuPfzizcOhxb9tU9oQIQu
"""

# app.py
import streamlit as st
import numpy as np
import xgboost as xgb
import tensorflow as tf
from PIL import Image
import json

# --- Load Models ---
@st.cache_resource
def load_models():
    cnn_model = tf.keras.models.load_model("best_model.keras")
    xgb_model = xgb.Booster()
    xgb_model.load_model("xgboost_sensor_model")
    return cnn_model, xgb_model

cnn_model, xgb_model = load_models()

# --- Label Mapping ---
label_mapping = {
    0: "Overheat",
    1: "Overpressure",
    2: "Puncture Suspected",
    3: "Underpressure",
    4: "Worn Out",
    5: "Unknown"
}

cv_labels = ["Good", "Defective"]

# --- UI Layout ---
st.title("üõû Tire Condition Diagnosis AI")
st.markdown("Upload a tire image and enter sensor data to receive a full diagnostic.")

# --- Upload Gambar ---
st.header("Step 1: Upload Tire Image")
image_file = st.file_uploader("Upload an image of the tire", type=["jpg", "jpeg", "png"])

# --- Input Sensor ---
st.header("Step 2: Enter Sensor Data")
with st.form("sensor_form"):
    col1, col2 = st.columns(2)
    with col1:
        pressure = st.number_input("Pressure (psi)", min_value=0.0, step=0.1)
        vibration = st.number_input("Vibration (Hz)", min_value=0.0, step=0.1)
        mileage = st.number_input("Mileage (km)", min_value=0.0, step=1.0)
    with col2:
        temperature = st.number_input("Temperature (C)", min_value=0.0, step=0.1)
        speed = st.number_input("Speed (kmph)", min_value=0.0, step=0.1)
    submitted = st.form_submit_button("Run Diagnosis")

# --- Processing ---
if submitted and image_file is not None:
    st.header("üîç Diagnosis Result")

    # --- CV Prediction ---
    image = Image.open(image_file).resize((224, 224))
    img_array = np.expand_dims(np.array(image) / 255.0, axis=0)
    cv_pred = np.argmax(cnn_model.predict(img_array))
    cv_result = cv_labels[cv_pred]
    st.write(f"**Image Analysis:** {cv_result}")

    # --- XGBoost Prediction ---
    sensor_input = np.array([[pressure, temperature, vibration, mileage, speed]])
    dmatrix = xgb.DMatrix(sensor_input)
    sensor_pred = int(xgb_model.predict(dmatrix)[0])
    sensor_result = label_mapping.get(sensor_pred, "Unknown")
    st.write(f"**Sensor Analysis:** {sensor_result}")

    # --- Decision Agent ---
    st.subheader("Final Diagnosis")
    if cv_result == "Defective" and sensor_result != "Unknown":
        final = f"Tire is defective with detected issue: **{sensor_result}**. Immediate action recommended."
    elif cv_result == "Defective":
        final = "Tire shows visual defect but sensor data is inconclusive. Manual inspection advised."
    elif sensor_result != "Unknown":
        final = f"No visual issue, but sensor data indicates potential problem: **{sensor_result}**. Monitor closely."
    else:
        final = "Tire appears to be in good condition. No issues detected."
    st.success(final)

elif submitted and image_file is None:
    st.warning("Please upload a tire image to proceed.")